server:
  port: 8000

#token:
#  secret: user_token

spring:
  application:
    name: apigateway-service

  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest

  # yml 설정 대신 FilterConfig 를 통해서 자바코드로도 설정 가능!
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true

      routes:
        - id: user-service
          uri: lb://USER-SERVICE/
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE/
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service(?<segment>.*), /$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE/
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter


        - id: user-service
          uri: lb://USER-SERVICE/
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service(?<segment>.*), /$\{segment}


        - id: order-service
          uri: lb://ORDER-SERVICE/
          predicates:
            - Path=/order-service/**

        - id: order-service
          uri: lb://ORDER-SERVICE/
          predicates:
            - Path=/order-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/order-service(?<segment>.*), /$\{segment}

        - id: catalog-service
          uri: lb://CATALOG-SERVICE/
          predicates:
            - Path=/catalog-service/**
        - id: first-service
          uri: lb://MY-FIRST-SERVICE/
          predicates:
            - Path=/first-service/**
          filters:
            - CustomFilter
        #            - AddRequestHeader=first-request, first-request-header
        #            - AddResponseHeader=first-response, first-response-header

        - id: second-service
          uri: lb://MY-SECOND-SERVICE/
          predicates:
            - Path=/second-service/**
          filters:
            - name: CustomFilter
            - name: LoggingFilter
              args:
                baseMessage: Hi, There.
                preLogger: true
                postLogger: true
#            - AddRequestHeader=second-request, second-request-header
#            - AddResponseHeader=second-response, second-response-header

eureka:
  instance:
    instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace, busrefresh, info, metrics, prometheus
